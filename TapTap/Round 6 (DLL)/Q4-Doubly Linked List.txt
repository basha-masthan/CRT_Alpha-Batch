//

#include <stdio.h>
#include <stdlib.h>


struct Node 
{
    int data;
    struct Node* llink;
    struct Node* rlink;
};


struct Node* createNode(int data) 
{
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    if (newNode == NULL) 
    {
        printf("Memory allocation failed.\n");
        exit(1);
    }
    newNode->data = data;
    newNode->llink = NULL;
    newNode->rlink = NULL;
    return newNode;
}

// Function to insert a node at a specified position in the doubly linked list
void insertNode(struct Node** head, int data, int position) 
{
    struct Node* newNode = createNode(data);
    if (*head == NULL || position <= 1) 
    {
        newNode->rlink = *head;
        if (*head != NULL) 
        {
            (*head)->llink = newNode;
        }
        *head = newNode;
        return;
    }
    struct Node* temp = *head;
    for (int i = 1; i < position - 1 && temp != NULL; i++) 
    {
        temp = temp->rlink;
    }
    if (temp == NULL) 
    {
        printf("Invalid position. Insertion failed.\n");
        return;
    }
    newNode->rlink = temp->rlink;
    if (temp->rlink != NULL) 
    {
        temp->rlink->llink = newNode;
    }
    temp->rlink = newNode;
    newNode->llink = temp;
}

// Function to delete a node at a specified position in the doubly linked list
void deleteNode(struct Node** head, int position) 
{
    if (*head == NULL) 
    {
        printf("Doubly linked list is empty.\n");
        return;
    }
    struct Node* temp = *head;
    if (position == 1) 
    {
        *head = temp->rlink;
        if (*head != NULL) 
        {
            (*head)->llink = NULL;
        }
        free(temp);
        return;
    }
    for (int i = 1; temp != NULL && i < position; i++) 
    {
        temp = temp->rlink;
    }
    if (temp == NULL) 
    {
        printf("Invalid position. Deletion failed.\n");
        return;
    }
    temp->llink->rlink = temp->rlink;
    if (temp->rlink != NULL) 
    {
        temp->rlink->llink = temp->llink;
    }
    free(temp);
}

// Function to traverse and print the doubly linked list
void traverseList(struct Node* head) 
{
    struct Node* temp = head;
    while (temp != NULL) 
    {
        printf("%d ", temp->data);
        temp = temp->rlink;
    }
    printf("\n");
}

// Function to create a doubly linked list
struct Node* createList(int n) 
{
    struct Node* head = NULL;
    int data;
    for (int i = 0; i < n; i++) 
    {
        scanf("%d", &data);
        insertNode(&head, data, i + 1);
    }
    return head;
}

int main() 
{
    struct Node* head = NULL;
    int choice, data, position, n;

        /*printf("Doubly Linked List Operations:\n");
        printf("1.Create\n");
        printf("2.Insert\n");
        printf("3.Delete\n");
        printf("4.Display\n");
        printf("5.Exit\n");*/
   
    while (1) 
   {

        //printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) 
       {
            case 1:
                //printf("Enter the number of nodes: ");
                scanf("%d", &n);
                head = createList(n);
                break;
            case 2:
                scanf("%d", &data);
                scanf("%d", &position);
                insertNode(&head, data, position);
                break;
            case 3:
                //printf("Enter position of node to delete: ");
                scanf("%d", &position);
                deleteNode(&head, position);
                break;
            case 4:
                traverseList(head);
                break;
            case 5:
                exit(0);
            default:
                printf("Invalid choice\n");
        }
    }

    return 0;
}
