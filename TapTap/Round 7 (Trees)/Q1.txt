#include <stdio.h>
#include <stdlib.h>
struct Node 
{
    int value;
    struct Node *left;
    struct Node *right;
};
struct Node* createNode(int value) 
{
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->value = value;
    newNode->left = NULL;
    newNode->right = NULL;
    return newNode;
}
struct Node* insert(struct Node* root, int value) 
{
    if (root == NULL) 
        return createNode(value);

    if (value <= root->value) 
        root->left = insert(root->left, value);

    else if (value >= root->value) 
        root->right = insert(root->right, value);

    return root;
}

struct Node* minValueNode(struct Node* node) 
{
    struct Node* temp = node;
    while (temp && temp->left != NULL) 
    {
        temp = temp->left;
    }
    return temp;
}

// Function to delete a node from BST
struct Node* deleteNode(struct Node* root, int data) 
{
    if (root == NULL) 
    {
        return root;
    }
    if (data < root->data) 
        root->left = deleteNode(root->left, data);
    else if (data > root->data) 
        root->right = deleteNode(root->right, data);
    else 
    {
        // Node with only one child or no child
        if (root->left == NULL) 
        {
            struct Node* temp = root->right;
            free(root);
            return temp;
        } 
        else if (root->right == NULL) 
        {
            struct Node* temp = root->left;
            free(root);
            return temp;
        }
        // Node with two children
        struct Node* temp = minValueNode(root->right);
        root->data = temp->data;
        root->right = deleteNode(root->right, temp->data);
    }
    return root;
}

// Function to perform inorder traversal of BST and print the elements
void inorderTraversal(struct Node* root) 
{
    if (root != NULL) 
    {
        inorderTraversal(root->left);
        printf("%d ", root->data);
        inorderTraversal(root->right);
    }
}

// Function to create BST with 'n' nodes
struct Node* createBST(int n) 
{
    struct Node* root = NULL;
    int i, data;
    printf("Enter %d integers to create BST:\n", n);
    for (i = 0; i < n; ++i) 
    {
        scanf("%d", &data);
        root = insert(root, data);
    }
    return root;
}

int main() 
{
    struct Node* root = NULL;
    int value;

    //printf("Enter integers to insert into the binary tree (end with -1):\n");
    while (1) 
    {
        scanf("%d", &value);
        switch (value) 
        {
            case -1:	// value to end the input
                	//printf("Binary Tree elements: ");
                	inorderTraversal(root);
                	printf("\n");
                	return 0;
            default:	if (value > 0 && value < 106) 
                    		root = insert(root, value);
                	else 
                    		printf("Value out of range (0 < value < 106). Please try again.\n");
                	break;
        }
    }
return 0;

}
}
