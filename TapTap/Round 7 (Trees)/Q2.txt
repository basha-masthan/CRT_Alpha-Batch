#include <stdio.h>
#include <stdlib.h>

// Definition of a binary tree node
struct Node 
{
    int data;
    struct Node *left, *right;
};

// Function to create a new node
struct Node* createNode(int data) 
{
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->left = newNode->right = NULL;
    return newNode;
}

// Function to insert a node in the binary tree
struct Node* insert(struct Node* root, int data) 
{
    if (root == NULL) 
        return createNode(data);
    
    if (data <= root->data) 
        root->left = insert(root->left, data);
    else if (data >= root->data) 
        root->right = insert(root->right, data);
    
    return root;
}

// Preorder traversal
void preorderTraversal(struct Node* root) 
{
    if (root != NULL) 
    {
        printf("%d ", root->data);
        preorderTraversal(root->left);
        preorderTraversal(root->right);
    }
}

// Inorder traversal
void inorderTraversal(struct Node* root) 
{
    if (root != NULL) 
    {
        inorderTraversal(root->left);
        printf("%d ", root->data);
        inorderTraversal(root->right);
    }
}

// Postorder traversal
void postorderTraversal(struct Node* root) 
{
    if (root != NULL) 
    {
        postorderTraversal(root->left);
        postorderTraversal(root->right);
        printf("%d ", root->data);
    }
}

int main() 
{
    struct Node* root = NULL;
    int value;

    // Reading input values and inserting into the binary tree
    //printf("Enter integers to insert into the binary tree (enter -1 to stop):\n");
    while (1) 
    {
        scanf("%d", &value);
        if (value == -1) 
            break;
        
        if (value > 0 && value < 1000) 
        {
            root = insert(root, value);
        }
    }

    // Printing all traversal orders simultaneously
    //printf("Preorder Traversal:\n");
    preorderTraversal(root);
    printf("\n");

    //printf("Inorder Traversal:\n");
    inorderTraversal(root);
    printf("\n");

    //printf("Postorder Traversal:\n");
    postorderTraversal(root);
    printf("\n");

    return 0;
}